--On Cars DB
--Select compelted collection
select * from c
-- Note that you can use any alias to your collection however while executing any query it is necessary that scope is set to the collection from which you want to bring data

--To get sepcific properties from a docuemnts
SELECT simpleCars.InvoiceNumber, simpleCars.TotalSalePrice FROM simpleCars

--Same result can be achieved with the help of Aliasing
SELECT s.InvoiceNumber, s.TotalSalePrice FROM simpleCars s

--Importent point to not here is in any case either we have to use Alias or collection name used in the select query to get the relust. Below query will  return an error
SELECT InvoiceNumber, TotalSalePrice FROM simpleCars s

-- If you want alias a property you can and AS key word is optional in any case
SELECT s.InvoiceNumber, s.TotalSalePrice AS Price FROM simpleCars s

--Format of the data returned as it is stored in JSON and these selects will also let you do arthimetic operations.
SELECT s.InvoiceNumber, 
    s.SaleDate,
    s.SalePrice - s.Cost as GrossProfit
FROM simpleCars s

-- Using Filters
--String Filters
SELECT s.InvoiceNumber, 
    s.SaleDate,
    s.SalePrice - s.Cost as GrossProfit,
    s.LineitemNumber
FROM simpleCars s
WHERE s.MakeName = "Bentley"

--Numaric Filters
SELECT s.InvoiceNumber, 
    s.SaleDate,
    s.SalePrice - s.Cost as GrossProfit,
    s.LineitemNumber
FROM simpleCars s
WHERE s.LineitemNumber = 2

--using between operators
SELECT s.InvoiceNumber, 
    s.SaleDate,
    s.SalePrice - s.Cost as GrossProfit,
    s.LineitemNumber
FROM simpleCars s
WHERE s.Cost BETWEEN 50000 AND 100000

--Same can be achieved in different way
SELECT s.InvoiceNumber, 
    s.SaleDate,
    s.Cost BETWEEN 50000 AND 100000 AS InCostRange, s.SalePrice 
FROM simpleCars s



-- Using Stores colletion
--Both below quries will pefrom same task however in the first script we are aliasing the current collections to mystore and in 2nd as c
SELECT * from mystore

SELECT * from c

--To get perticular value or peoperty from collection
SELECT mystore.name FROM mystore

--This will change the document to array and it works only when we are fetching only one value
SELECT VALUE mystore.name FROM mystore


SELECT m.name,
    m.address.location,
    m.address.location.city
FROM m

SELECT m.name,
    a.location,
    l.city
FROM m
JOIN  m.address a
JOIN a.location l

SELECT *
FROM m.address.location


--Using Families collection
-- Alias the subset to filter
-- within the subset
SELECT *
 FROM c.address.location AS l
 WHERE
  l.stateProvinceName IN
   ('Florida', 'Illinois')


--Multiple joins and Collesce
SELECT
 c.id,
 ch.givenName,
 ch.grade
FROM c 
JOIN ch IN c.children
JOIN p IN ch.pets

SELECT
 c.id,
 ch.givenName ?? ch.firstName,
 ch.grade
FROM c 
JOIN ch IN c.children
JOIN p IN ch.pets

--String Concatination
SELECT VALUE
 c.name || ', ' ||  c.address.contryregioname ||  ' ,' || c.address.location.city
FROM c


-- Range queries
SELECT VALUE c.name
 FROM c
 WHERE
  c.name >= 'A' AND
  c.name <= 'K'

SELECT VALUE c.name
 FROM c
 WHERE
  c.name BETWEEN 'A' AND 'K'


-- Can't count across
-- partitions without VALUE
SELECT COUNT(1) AS USCount
FROM c
WHERE
 c.address.countryRegionName =
  'United States'

-- Use VALUE for cross
-- partition aggregates
SELECT VALUE COUNT(1)
FROM c
WHERE
 c.address.countryRegionName =
  'United States'

-- Total families
SELECT VALUE COUNT(c)
FROM c

-- Lowest grade
SELECT VALUE
 MIN(ch.grade)
FROM ch IN c.children

-- Highest grade
SELECT VALUE
 MAX(ch.grade)
FROM ch IN c.children

-- Total children
SELECT VALUE
 SUM(ARRAY_LENGTH(c.children))
FROM c

--Using Stores collection
--IIF or Ternary ?
SELECT
    c.name,
    c.address.countryRegionName,
    (c.address.countryRegionName = "United States" ? "USD" : "CAD") As Currency
FROM c
where c.address.countryRegionName IN ( "United States", "Canada")

--Nested IIF or Ternary ?
SELECT
    c.name,
    c.address.countryRegionName,
    (c.address.countryRegionName = "United States" ? "USD" : (
        c.address.countryRegionName = "Canada"  ? "CAD" : "EUR"
    )) As Currency
FROM c
where c.address.countryRegionName IN ( "United States", "Canada", "France")